datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "rhel-openssl-1.0.x", "rhel-openssl-3.0.x", "linux-musl", "debian-openssl-1.1.x", "debian-openssl-3.0.x"]
  output        = "../node_modules/.prisma/client"
}

model User {
  id             String          @id @default(cuid())
  name           String?
  email          String          @unique
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  sessionVersion Int             @default(1)
  Authenticator  Authenticator[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Organization      Organization[]
  User_Organization User_Organization[]
  sentInvites       Invite[]            @relation("InvitedBy")
  notifications     Notification[]
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

enum PlanType {
  FREE
  PRO
}

model Organization {
  id                   String   @id @default(cuid())
  name                 String   @db.VarChar
  owner_user_id        String
  uniqueId             String   @unique
  plan                 PlanType @default(FREE)
  stripeCustomerId     String?  @unique
  stripeSubscriptionId String?  @unique

  // Trial tracking fields
  trialStartDate DateTime?
  trialEndDate   DateTime?
  trialUsed      Boolean   @default(false)

  // Detailed subscription fields
  subscriptionStatus String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean   @default(false)
  lastPaymentDate    DateTime?
  nextBillingDate    DateTime?
  paymentMethodLast4 String?
  paymentMethodBrand String?

  user              User                @relation(fields: [owner_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User_Organization User_Organization[]
  ExampleItem       ExampleItem[]
  invites           Invite[]
}

enum Role {
  OWNER
  ADMIN
  USER
}

model User_Organization {
  user_id         String
  organization_id String
  role            Role   @default(USER)

  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, organization_id])
}

model ExampleItem {
  id              String @id @default(cuid())
  name            String
  organization_id String

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Invite {
  id              String       @id @default(cuid())
  email           String
  organization_id String
  invited_by_id   String
  role            Role         @default(USER)
  status          InviteStatus @default(PENDING)
  expires_at      DateTime
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  invited_by   User         @relation("InvitedBy", fields: [invited_by_id], references: [id], onDelete: Cascade)

  @@unique([email, organization_id])
  @@index([email])
  @@index([organization_id])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}

model LoginAttemptByIP {
  id           String    @id @default(cuid())
  ip           String
  attempts     Int       @default(1)
  lastAttempt  DateTime  @default(now())
  blockedUntil DateTime?

  @@unique([ip])
  @@index([ip])
}

model Notification {
  id            String           @id @default(cuid())
  user_id       String
  title         String
  message       String
  type          NotificationType @default(SYSTEM)
  read          Boolean          @default(false)
  linked_entity String?
  entity_type   String?
  created_at    DateTime         @default(now())
  updated_at    DateTime         @updatedAt

  user User @relation(fields: [user_id], references: [id], onDelete: Cascade)

  @@index([user_id])
  @@index([read])
}

enum NotificationType {
  SYSTEM
  INVITE
  ORGANIZATION
  MEMBER
}

model SecurityLog {
  id        String   @id @default(cuid())
  eventType String
  userId    String?
  ip        String?
  userAgent String?
  metadata  Json     @default("{}")
  createdAt DateTime @default(now())

  @@index([eventType])
  @@index([userId])
  @@index([createdAt])
  @@index([eventType, userId, createdAt])
}
