datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String          @id @default(cuid())
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  Organization      Organization[]
  User_Organization User_Organization[]
  sentInvites       Invite[]            @relation("InvitedBy")
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}

// Custom models -- not next-auth native
model Organization {
  id            String @id @default(cuid())
  name          String @db.VarChar
  owner_user_id String

  // i.e. `org-123`
  // We have a blacklist of names that correspond to specific routes, i.e. /login
  uniqueId String @unique

  // Put other organization-specific information here
  // i.e. Stripe payment information, plan, etc

  user              User                @relation(fields: [owner_user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  User_Organization User_Organization[]
  ExampleItem       ExampleItem[]
  invites           Invite[]
}

enum Role {
  OWNER
  ADMIN
  USER
}

// Many to many relationship between User and Organization
model User_Organization {
  user_id         String
  organization_id String
  role            Role   @default(USER)

  user         User         @relation(fields: [user_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)

  @@id([user_id, organization_id])
}

model ExampleItem {
  id              String @id @default(cuid())
  name            String
  organization_id String

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade, onUpdate: NoAction)
}

model Invite {
  id              String       @id @default(cuid())
  email           String
  organization_id String
  invited_by_id   String
  role            Role         @default(USER)
  status          InviteStatus @default(PENDING)
  expires_at      DateTime
  created_at      DateTime     @default(now())
  updated_at      DateTime     @updatedAt

  organization Organization @relation(fields: [organization_id], references: [id], onDelete: Cascade)
  invited_by   User         @relation("InvitedBy", fields: [invited_by_id], references: [id], onDelete: Cascade)

  @@unique([email, organization_id])
  @@index([email])
  @@index([organization_id])
}

enum InviteStatus {
  PENDING
  ACCEPTED
  REJECTED
  EXPIRED
}
