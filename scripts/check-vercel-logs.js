#!/usr/bin/env node

/**
 * Script para verificar logs da Vercel
 * 
 * Uso:
 * 1. Instale a Vercel CLI: npm i -g vercel
 * 2. Fa√ßa login: vercel login
 * 3. Execute: node scripts/check-vercel-logs.js
 */

const { execSync } = require('child_process');

console.log('üîç Verificando logs da Vercel...\n');

try {
  // Verificar se a Vercel CLI est√° instalada
  try {
    execSync('vercel --version', { stdio: 'pipe' });
  } catch (error) {
    console.error('‚ùå Vercel CLI n√£o est√° instalada.');
    console.log('üì¶ Instale com: npm i -g vercel');
    process.exit(1);
  }

  // Obter informa√ß√µes do projeto
  console.log('üìã Informa√ß√µes do projeto:');
  try {
    const projectInfo = execSync('vercel project ls', { encoding: 'utf8' });
    console.log(projectInfo);
  } catch (error) {
    console.log('‚ö†Ô∏è  Execute "vercel" no diret√≥rio do projeto primeiro');
  }

  // Obter logs recentes
  console.log('\nüìä Logs recentes (√∫ltimos 100):');
  try {
    const logs = execSync('vercel logs --limit 100', { encoding: 'utf8' });
    console.log(logs);
  } catch (error) {
    console.error('‚ùå Erro ao obter logs:', error.message);
  }

  // Obter logs de build
  console.log('\nüèóÔ∏è  Logs de build:');
  try {
    const buildLogs = execSync('vercel logs --limit 50 --since 1h', { encoding: 'utf8' });
    console.log(buildLogs);
  } catch (error) {
    console.error('‚ùå Erro ao obter logs de build:', error.message);
  }

  // Comandos √∫teis
  console.log('\nüõ†Ô∏è  Comandos √∫teis:');
  console.log('vercel logs --follow          # Logs em tempo real');
  console.log('vercel logs --since 1h        # Logs da √∫ltima hora');
  console.log('vercel logs --limit 200       # Mais logs');
  console.log('vercel inspect <deployment>   # Inspecionar deployment espec√≠fico');

} catch (error) {
  console.error('‚ùå Erro:', error.message);
  process.exit(1);
}